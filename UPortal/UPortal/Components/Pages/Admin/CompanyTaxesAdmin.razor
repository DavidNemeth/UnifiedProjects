@page "/admin/company-taxes"
@attribute [Authorize(Policy = PermissionPolicies.AccessAdminPages)]

@inject ICompanyTaxService CompanyTaxService
@inject IDialogService DialogService
@inject IToastService ToastService

@using UPortal.Dtos
@using UPortal.Components.Dialogs
@using Microsoft.FluentUI.AspNetCore.Components
@using UPortal.Security

<PageTitle>Company Taxes</PageTitle>

<FluentStack VerticalAlignment="VerticalAlignment.Center"
             HorizontalAlignment="HorizontalAlignment.SpaceBetween">
    <h1>Company Tax Management</h1>
    <FluentButton IconStart="@(new Icons.Regular.Size20.Add())" Appearance="Appearance.Accent" OnClick="@OpenAddDialogAsync">
    </FluentButton>
</FluentStack>

@if (companyTaxes is null)
{
    <FluentProgressRing />
    <p><em>Loading...</em></p>
}
else if (!companyTaxes.Any())
{
    <p><em>No company taxes defined yet. Click the add button to create one.</em></p>
}
else
{
    <FluentDataGrid Pagination="@pagination"
                    RowSize="@DataGridRowSize.Medium"
                    Items="@companyTaxes.AsQueryable()"
                    GridTemplateColumns="0.5fr 2fr 1fr 2fr 1fr"
                    TGridItem="CompanyTaxDto">
        <PropertyColumn Property="@(dto => dto.Id)" Sortable="true" />
        <PropertyColumn Property="@(dto => dto.Name)" Sortable="true" />
        <PropertyColumn Property="@(dto => dto.Rate)" Sortable="true" Format="P2" />
        <PropertyColumn Property="@(dto => dto.Description)" Sortable="false" />
        <TemplateColumn Title="Actions" Align="Align.End">
            <FluentButton IconStart="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => OpenEditDialogAsync(context))"></FluentButton>
            <FluentButton IconStart="@(new Icons.Regular.Size16.Delete())" Appearance="Appearance.Stealth" OnClick="@(() => ConfirmDeleteAsync(context))"></FluentButton>
        </TemplateColumn>
    </FluentDataGrid>

    <FluentPaginator State="@pagination" />
}

@code {
    private List<CompanyTaxDto> companyTaxes;
    private readonly PaginationState pagination = new() { ItemsPerPage = 10 };

    protected override async Task OnInitializedAsync()
    {
        await RefreshGridDataAsync();
    }

    private async Task RefreshGridDataAsync()
    {
        companyTaxes = (await CompanyTaxService.GetAllAsync()).OrderBy(t => t.Name).ToList();
        StateHasChanged();
    }

    [Authorize(Policy = PermissionPolicies.ManageSettings)]
    private async Task OpenAddDialogAsync()
    {
        var dialog = await DialogService.ShowDialogAsync<CompanyTaxDialog>(new CompanyTaxDto(), new DialogParameters()
        {
            Title = "Add New Company Tax",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true,
            Width = "400px"
        });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data is not null)
        {
            var companyTaxDto = (CompanyTaxDto)result.Data;
            await CompanyTaxService.CreateAsync(companyTaxDto);
            ToastService.ShowSuccess("Company Tax created successfully.");
            await RefreshGridDataAsync();
        }
    }

    [Authorize(Policy = PermissionPolicies.ManageSettings)]
    private async Task OpenEditDialogAsync(CompanyTaxDto taxToEdit)
    {
        var clonedDto = new CompanyTaxDto { Id = taxToEdit.Id, Name = taxToEdit.Name, Rate = taxToEdit.Rate, Description = taxToEdit.Description };

        var dialogParameters = new DialogParameters()
        {
            Title = $"Edit Company Tax: {taxToEdit.Name}",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true,
            Width = "600px"
        };

        var dialog = await DialogService.ShowDialogAsync<CompanyTaxDialog>(clonedDto, dialogParameters);
        DialogResult? result = await dialog.Result;

        if (result is { Cancelled: false, Data: not null })
        {
            var updatedDto = (CompanyTaxDto)result.Data;
            var success = await CompanyTaxService.UpdateAsync(updatedDto.Id, updatedDto);
            if (success)
            {
                ToastService.ShowSuccess($"Company tax '{updatedDto.Name}' updated successfully.");
                await RefreshGridDataAsync();
            }
            else
            {
                ToastService.ShowError($"Failed to update company tax '{updatedDto.Name}'.");
            }
        }
    }

    [Authorize(Policy = PermissionPolicies.ManageSettings)]
    private async Task ConfirmDeleteAsync(CompanyTaxDto taxToDelete)
    {
        var dialog = await DialogService.ShowConfirmationAsync(
            $"Are you sure you want to delete the company tax '{taxToDelete.Name}'?",
            "Yes, Delete", "No, Cancel", $"Confirm Deletion");

        DialogResult? result = await dialog.Result;

        if (result != null && !result.Cancelled)
        {
            var success = await CompanyTaxService.DeleteAsync(taxToDelete.Id);
            if (success)
            {
                ToastService.ShowSuccess($"Company tax '{taxToDelete.Name}' deleted successfully.");
                await RefreshGridDataAsync();
            }
            else
            {
                ToastService.ShowError($"Failed to delete company tax '{taxToDelete.Name}'.");
            }
        }
    }
}
