@page "/admin/machines"
@inject IMachineService MachineService

<PageTitle>Machines</PageTitle>

@attribute [Authorize(Policy = PermissionPolicies.ManageMachines)]

<FluentStack VerticalAlignment="VerticalAlignment.Center"
             HorizontalAlignment="HorizontalAlignment.SpaceBetween">
    <h1>Machines</h1>
    <FluentButton IconStart="@(new Icons.Regular.Size20.Add())" Appearance="Appearance.Accent" OnClick="@OpenAddDialogAsync">
    </FluentButton>
</FluentStack>

@if (machines is null)
{
    <FluentProgressRing />
    <p><em>Loading...</em></p>
}
else
{
    <FluentDataGrid Pagination="@pagination"
                    RowSize="@DataGridRowSize.Medium"
                    Items="@machines.AsQueryable()"
                    GridTemplateColumns="1fr 3fr 1fr 1fr 2fr" TGridItem="MachineDto">
        <PropertyColumn Property="@(dto => dto.Id)" Sortable="true" />
        <PropertyColumn Property="@(dto => dto.Name)" Sortable="true" />
        <PropertyColumn Property="@(dto => dto.LocationName)" Title="Location" Sortable="true" />
        <PropertyColumn Property="@(dto => dto.AssignedUserName)" Title="Assigned User" Sortable="true" />

        <TemplateColumn Title="Actions" Align="Align.End">
            <FluentButton IconStart="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => OpenEditDialogAsync(context))"></FluentButton>
            <FluentButton IconStart="@(new Icons.Regular.Size16.Delete())" Appearance="Appearance.Stealth" OnClick="@(() => ConfirmDeleteAsync(context))"></FluentButton>
        </TemplateColumn>
    </FluentDataGrid>

    <FluentPaginator State="@pagination" />
}

@code {
    private List<MachineDto> machines;
    PaginationState pagination = new PaginationState() { ItemsPerPage = 10 };

    protected override async Task OnInitializedAsync()
    {
        await RefreshGridDataAsync();
    }

    private async Task OpenAddDialogAsync()
    {
        var dialog = await DialogService.ShowDialogAsync<MachineDialog>(new CreateMachineDto(), new DialogParameters()
        {
            Title = "Add New Machine",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true,
            Width = "400px"
        });

        var result = await dialog.Result;

        if (!result.Cancelled && result.Data is not null)
        {
            var newMachineDto = (CreateMachineDto)result.Data;
            await MachineService.CreateAsync(newMachineDto);
            ToastService.ShowSuccess("Machine created successfully.");
            await RefreshGridDataAsync();
        }
    }

    private async Task OpenEditDialogAsync(MachineDto machineToEdit)
    {
        // To edit, we need the original IDs. We first get the full entity.
        var machineEntity = await MachineService.GetByIdAsync(machineToEdit.Id);
        if (machineEntity is null)
        {
            ToastService.ShowError("Could not find machine to edit.");
            return;
        }

        // We create the DTO for the dialog
        var dto = new CreateMachineDto
        {
            Name = machineToEdit.Name,
            LocationId = machineEntity.LocationId, // We need the ID for the dropdown
            AppUserId = machineEntity.AppUserId    // We need the ID for the dropdown
        };

        var dialog = await DialogService.ShowDialogAsync<MachineDialog>(dto, new DialogParameters()
        {
            Title = $"Edit '{machineToEdit.Name}'",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true,
            Width = "400px"
        });

        var result = await dialog.Result;

        if (!result.Cancelled && result.Data is not null)
        {
            var updatedDto = (CreateMachineDto)result.Data;
            await MachineService.UpdateAsync(machineToEdit.Id, updatedDto);
            ToastService.ShowSuccess("Machine updated successfully.");
            await RefreshGridDataAsync();
        }
    }

    private async Task ConfirmDeleteAsync(MachineDto machineToDelete)
    {
        var dialog = await DialogService.ShowConfirmationAsync(
            $"Are you sure you want to delete '{machineToDelete.Name}'?",
            "Yes, delete", "No, cancel", "Confirm Deletion");

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var success = await MachineService.DeleteAsync(machineToDelete.Id);
            if (success)
            {
                ToastService.ShowSuccess("Machine deleted successfully.");
                await RefreshGridDataAsync();
            }
            else
            {
                ToastService.ShowError("Failed to delete machine.");
            }
        }
    }

    private async Task RefreshGridDataAsync()
    {
        machines = await MachineService.GetAllAsync();
        StateHasChanged();
    }
}
