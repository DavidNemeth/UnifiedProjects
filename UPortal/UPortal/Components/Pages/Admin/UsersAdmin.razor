@page "/admin/users"
@inject IAppUserService AppUserService
@inject IDialogService DialogService
@inject IToastService ToastService
@using Microsoft.FluentUI.AspNetCore.Components
@using UPortal.Dtos
@using UPortal.Data.Models 
@using UPortal.Components.Dialogs
@using UPortal.Components.Pages.Admin


@attribute [Authorize(Policy = PermissionPolicies.ManageUsers)]

<PageTitle>Users</PageTitle>

<FluentStack VerticalAlignment="VerticalAlignment.Center" HorizontalGap="10">
    <h1>Users Administration</h1>
</FluentStack>

@if (users is null)
{
    <FluentProgressRing />
    <p><em>Loading...</em></p>
}
else
{
    <FluentDataGrid Pagination="@pagination"
                    RowSize="@DataGridRowSize.Medium"
                    Items="@users.AsQueryable()"
                    GridTemplateColumns="0.3fr 1.5fr 1fr 0.8fr 1fr 0.8fr 0.5fr 1.2fr" TGridItem="AppUserDto">
        <PropertyColumn Property="@(dto => dto.Id)" Sortable="true" />
        <PropertyColumn Property="@(dto => dto.Name)" Sortable="true" />
        <PropertyColumn Property="@(dto => dto.LocationName)" Title="Location" Sortable="true" />
        <PropertyColumn Property="@(dto => dto.GrossMonthlyWage)" Title="Gross Wage" Sortable="true">
            <ColumnOptions Align="Align.End" />
        </PropertyColumn>
        <PropertyColumn Property="@(dto => dto.TotalMonthlyCost)" Title="Total Monthly Cost" Sortable="true">
            <ColumnOptions Align="Align.End" />
        </PropertyColumn>
        <PropertyColumn Property="@(dto => dto.SeniorityLevel)" Title="Seniority" Sortable="true" />
        <PropertyColumn Property="@(dto => dto.IsActive)" Title="Active" Sortable="true" />

        <TemplateColumn Title="Actions" Align="Align.End">
            <FluentButton IconStart="@(new Icons.Regular.Size16.Edit())" Appearance="Appearance.Stealth" Title="Edit Details" OnClick="@(() => OpenEditUserDialogAsync(context))"></FluentButton>
            <FluentButton IconStart="@(new Icons.Regular.Size16.Money())" Appearance="Appearance.Stealth" Title="Edit Financials" OnClick="@(() => OpenEditUserFinancialsDialogAsync(context))"></FluentButton>
        </TemplateColumn>
    </FluentDataGrid>

    <FluentPaginator State="@pagination" />
}

@code {
    private List<AppUserDto>? users;
    private PaginationState pagination = new PaginationState() { ItemsPerPage = 10 };

    protected override async Task OnInitializedAsync()
    {
        await RefreshGridDataAsync();
    }

    private async Task RefreshGridDataAsync()
    {
        users = await AppUserService.GetAllAsync();
        users = users.OrderBy(u => u.Name).ToList();
        StateHasChanged();
    }

    private async Task OpenEditUserDialogAsync(AppUserDto userToEdit)
    {
        var userToUpdate = new UpdateAppUserDto
        {
            IsActive = userToEdit.IsActive,
            LocationId = userToEdit.LocationId // Add LocationId
        };

        var dialog = await DialogService.ShowDialogAsync<AppUserDialog>(userToUpdate, new DialogParameters()
        {
            Title = $"Edit User",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true
        });

        var result = await dialog.Result;

        if (!result.Cancelled && result.Data is not null)
        {
            var updatedUser = (UpdateAppUserDto)result.Data;
            try
            {
                await AppUserService.UpdateAppUserAsync(userToEdit.Id, updatedUser);
                ToastService.ShowSuccess($"User '{userToEdit.Name}' was updated successfully.");
                await RefreshGridDataAsync();
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"Failed to update user: {ex.Message}");
            }
        }
    }

    private async Task OpenEditUserFinancialsDialogAsync(AppUserDto userToEdit)
    {
        var financialsDto = new UpdateAppUserFinancialsDto
        {
            GrossMonthlyWage = userToEdit.GrossMonthlyWage,
            // AppUserDto.SeniorityLevel is string, UpdateAppUserFinancialsDto.SeniorityLevel is SeniorityLevelEnum?
            // Need to parse it back.
            SeniorityLevel = !string.IsNullOrEmpty(userToEdit.SeniorityLevel)
                             ? Enum.TryParse<SeniorityLevelEnum>(userToEdit.SeniorityLevel, true, out var parsedLevel)
                               ? parsedLevel
                               : (SeniorityLevelEnum?)null
                             : null
        };

        var dialog = await DialogService.ShowDialogAsync<UserFinancialsDialog>(financialsDto, new DialogParameters()
        {
            Title = $"Edit Financials for {userToEdit.Name}",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true
        });

        var result = await dialog.Result;

        if (!result.Cancelled && result.Data is not null)
        {
            var updatedFinancials = (UpdateAppUserFinancialsDto)result.Data;
            try
            {
                await AppUserService.UpdateFinancialDataAsync(userToEdit.Id, updatedFinancials);
                ToastService.ShowSuccess($"Financial data for '{userToEdit.Name}' was updated successfully.");
                await RefreshGridDataAsync(); // Refresh grid to show new data
            }
            catch (KeyNotFoundException knfEx)
            {
                ToastService.ShowError($"User '{userToEdit.Name}' not found: {knfEx.Message}");
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"Failed to update financial data for '{userToEdit.Name}': {ex.Message}");
            }
        }
    }
}