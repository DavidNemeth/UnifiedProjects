@using UPortal.Dtos
@using System.ComponentModel.DataAnnotations
@implements IDialogContentComponent<CompanyTaxDto>

@inject ILogger<CompanyTaxDialog> _logger
@inject IToastService ToastService

@if (_editContext is not null)
{
    <FluentDialogHeader ShowDismiss="true">
        <FluentStack VerticalAlignment="VerticalAlignment.Center">
            <FluentIcon Value="@(new Icons.Regular.Size24.Money())" />
            <FluentLabel Typo="Typography.PaneHeader">
                @Dialog.Instance.Parameters.Title
            </FluentLabel>
        </FluentStack>
    </FluentDialogHeader>

    <FluentDialogBody>
        <EditForm EditContext="@_editContext">
            <DataAnnotationsValidator />
            <FluentStack Orientation="Orientation.Vertical">
                <FluentTextField @bind-Value="Content.Name"
                                 Label="Tax Name"
                                 Placeholder="Enter tax name (e.g., Social Contribution)"
                                 Required="true"
                                 Style="width: 100%;" />

                <FluentNumberField @bind-Value="Content.Rate"
                                   Label="Tax Rate (e.g., 0.13 for 13%)"
                                   Placeholder="Enter rate as a decimal"
                                   Required="true"
                                   Style="width: 100%;" />

                <FluentTextField @bind-Value="Content.Description"
                                 Label="Description (Optional)"
                                 Placeholder="Enter a brief description of the tax"
                                 TextFieldType="TextFieldType.Text"
                                 Style="width: 100%;" />
            </FluentStack>
        </EditForm>
    </FluentDialogBody>

    <FluentDialogFooter>
        <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
        <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync" Disabled="@(!_editContext.Validate())">Save</FluentButton>
    </FluentDialogFooter>
}

@code {
    private EditContext _editContext = default!;

    /// <summary>
    /// Gets or sets the cascading <see cref="FluentDialog"/> instance.
    /// </summary>
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    /// <summary>
    /// Gets or sets the content of the dialog, which is a <see cref="CompanyTaxDto"/> object.
    /// This object is bound to the form fields.
    /// </summary>
    [Parameter]
    public CompanyTaxDto Content { get; set; } = default!;

    /// <summary>
    /// Initializes the dialog by creating an <see cref="EditContext"/>.
    /// </summary>
    protected override void OnInitialized()
    {
        _logger.LogInformation("CompanyTaxDialog initializing for tax: {TaxName}", Content?.Name ?? "New Tax");
        _editContext = new EditContext(Content);
        _logger.LogInformation("CompanyTaxDialog initialization completed for tax: {TaxName}", Content?.Name ?? "New Tax");
    }

    /// <summary>
    /// Handles the save action for the dialog.
    /// Validates the form and, if valid, closes the dialog, returning the <see cref="Content"/>.
    /// </summary>
    private async Task SaveAsync()
    {
        _logger.LogInformation("SaveAsync called in CompanyTaxDialog for tax: {TaxName}", Content.Name);
        if (!_editContext.Validate())
        {
            _logger.LogWarning("CompanyTaxDialog form is invalid for tax: {TaxName}. Save aborted.", Content.Name);
            return; // Stop if validation fails.
        }
        _logger.LogInformation("CompanyTaxDialog form is valid. Closing dialog with content for tax: {TaxName}", Content.Name);
        await Dialog.CloseAsync(Content);
    }

    /// <summary>
    /// Handles the cancel action for the dialog.
    /// Closes the dialog without returning any data.
    /// </summary>
    private async Task CancelAsync()
    {
        _logger.LogInformation("CancelAsync called in CompanyTaxDialog for tax: {TaxName}. Closing dialog.", Content?.Name ?? "New Tax");
        await Dialog.CancelAsync();
    }
}
