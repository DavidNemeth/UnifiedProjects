@using UPortal.Data.Models
@using UPortal.Dtos
@using UPortal.HelperServices
@using System.ComponentModel.DataAnnotations
@implements IDialogContentComponent<UpdateAppUserFinancialsDto>
@inject ILogger<UserFinancialsDialog> Logger

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.Money())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <EditForm EditContext="@_editContext" OnValidSubmit="SaveAsync">
        <DataAnnotationsValidator />
        <FluentStack Orientation="Orientation.Vertical" Gap="1.5rem">
            <FluentNumberField @bind-Value="Content.GrossMonthlyWage"
                               Label="Gross Monthly Wage (Ft)"
                               Placeholder="Enter gross monthly wage"
                               Step="100000"
                               Min="0"
                               Style="width: 100%;" />
            <ValidationMessage For="@(() => Content.GrossMonthlyWage)" />

            <FluentSelect Label="Seniority Level"
                          Value="@(Content.SeniorityLevel?.ToString() ?? "")"
                          ValueChanged="@OnSeniorityLevelChanged"
                          TOption="string"
                          Style="width: 100%;">
                @foreach (var item in seniorityLevelOptions)
                {
                    <FluentOption Value="@(item.Value?.ToString() ?? "")">@item.DisplayName</FluentOption>
                }
            </FluentSelect>

        </FluentStack>
    </EditForm>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
    <FluentButton Appearance="Appearance.Accent" Type="ButtonType.Submit" Form="EditForm" OnClick="@SaveAsync" Disabled="@(!_editContext.Validate())">Save</FluentButton>
</FluentDialogFooter>

@code {
    private EditContext _editContext = default!;
    private List<SelectListItem<SeniorityLevelEnum?>> seniorityLevelOptions = new();

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [Parameter]
    public UpdateAppUserFinancialsDto Content { get; set; } = new();

    [Parameter]
    public string UserName { get; set; } = string.Empty; // For logging context

    protected override void OnInitialized()
    {
        Logger.LogInformation("UserFinancialsDialog for User: {UserName} initializing.", UserName);
        _editContext = new EditContext(Content);
        seniorityLevelOptions = EnumHelpers.GetSeniorityLevelSelectListItems(includeNoneOption: true, noneOptionText: "-- Select Level --");
        Logger.LogInformation("UserFinancialsDialog initialization completed for User: {UserName}.", UserName);
    }

    private async Task SaveAsync()
    {
        Logger.LogInformation("SaveAsync called in UserFinancialsDialog for User: {UserName}. Attempting to validate.", UserName);
        if (_editContext.Validate())
        {
            Logger.LogInformation("UserFinancialsDialog form is valid for User: {UserName}. Closing dialog with content.", UserName);
            await Dialog.CloseAsync(Content);
        }
        else
        {
            Logger.LogWarning("UserFinancialsDialog form is invalid for User: {UserName}. Save aborted.", UserName);
        }
    }

    private async Task CancelAsync()
    {
        Logger.LogInformation("CancelAsync called in UserFinancialsDialog for User: {UserName}. Closing dialog.", UserName);
        await Dialog.CancelAsync();
    }

    private void OnSeniorityLevelChanged(string? newValue)
    {
        if (Enum.TryParse<SeniorityLevelEnum>(newValue, out var enumValue))
        {
            Content.SeniorityLevel = enumValue;
        }
        else
        {
            Content.SeniorityLevel = null;
        }
        _editContext.NotifyFieldChanged(FieldIdentifier.Create(() => Content.SeniorityLevel));
    }
}
