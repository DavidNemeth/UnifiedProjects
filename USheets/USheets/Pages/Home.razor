@page "/"
@using USheets.Dtos
@using USheets.Services
@using System.Threading
@inject ITimesheetService TimesheetService
@implements IDisposable
@attribute [Authorize]

<div class="main-container">
    <div class="page-header">
        <h3>@DisplayWeekRange()</h3>
    </div>

    <div class="button-container-toolbar">
        <div class="button-group-left">
            <button class="btn btn-primary btn-icon-nav" @onclick="() => ChangeWeekAsync(-1)" aria-label="Previous Week" disabled="@_isSaving">‹</button>
            <button class="btn btn-primary btn-icon-nav" @onclick="() => ChangeWeekAsync(1)" aria-label="Next Week" disabled="@_isSaving">›</button>
            <button class="btn btn-info @(_isDisplayingCurrentCalendarWeek ? "active-current-week-btn" : "")" @onclick="GoToCurrentWeekAsync" disabled="@_isSaving">Current Week</button>
            <button class="btn btn-secondary" @onclick="CopyFromPreviousWeekAsync" disabled="@IsTimesheetReadOnly">Copy from Previous Week</button>
        </div>
        <div class="button-group-right">
            <span class="autosave-status @(_autosaveStatusClass)">@_autosaveStatusMessage</span>
        </div>
    </div>
    
    @if (_isLoading)
    {
        <div class="loading-indicator"><p><em>Loading Timesheet...</em></p></div>
    }
    else if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger" role="alert">@_errorMessage</div>
    }
    else if (_timesheet != null)
    {
        <div class="timesheet-container @(IsTimesheetReadOnly ? "readonly-timesheet" : "")">
            @if (_timesheet.Status == TimesheetStatus.Rejected && !string.IsNullOrWhiteSpace(_timesheet.RejectionReason))
            {
                <div class="rejection-notice">
                    <strong>Rejected:</strong> @_timesheet.RejectionReason
                </div>
            }

            <div class="table-responsive-container">
                <table class="timesheet-table">
                    <thead>
                        <tr>
                            <th>Pay Code</th>
                            @foreach (var day in _daysOfWeek)
                            {
                                <th class="day-header">@day.ToString().Substring(0, 3) <br/> <span class="date-header">@GetDateForDay(day).Day</span></th>
                            }
                            <th>Project / Task</th>
                            <th class="total-header">Total</th>
                            <th class="action-header"><button class="btn btn-primary btn-icon-only" @onclick="AddNewLine" disabled="@(!CanAddNewLine || IsTimesheetReadOnly)" aria-label="Add New Line">+</button></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var line in _timesheet.Lines)
                        {
                            <tr>
                                <td>
                                    <select class="form-control" @bind="line.PayCode" @bind:after="TriggerAutoSave" disabled="@IsTimesheetReadOnly">
                                        @foreach (var payCode in _allPayCodes)
                                        {
                                            bool isUsed = _timesheet.Lines.Any(l => l != line && l.PayCode == payCode);
                                            <option value="@payCode" disabled="@isUsed">@payCode</option>
                                        }
                                    </select>
                                </td>
                                @foreach (var dayKey in _daysOfWeek)
                                {
                                    <td class="@GetDayCellClasses(dayKey)">
                                        <input type="number" step="0.25" min="0" max="24"
                                               class="form-control hours-input"
                                               value="@line.Hours[dayKey]"
                                               @oninput="(e) => HandleHoursChange(line, dayKey, e.Value?.ToString())"
                                               disabled="@IsTimesheetReadOnly"/>
                                    </td>
                                }
                                <td><input type="text" class="form-control" placeholder="Optional" @bind="line.ProjectName" @bind:after="TriggerAutoSave" disabled="@IsTimesheetReadOnly" /></td>
                                <td class="total-hours-cell">@line.TotalHours.ToString("0.##")</td>
                                <td><button class="btn btn-danger btn-sm" @onclick="() => DeleteLine(line)" aria-label="Delete line" disabled="@IsTimesheetReadOnly">X</button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="summary-section">
            <div class="summary-bar">
                <span class="@GetStatusBadgeClass()">@_timesheet.Status.ToString()</span>
                <span class="total-hours-summary"><strong>Total:</strong> @_timesheet.TotalHours.ToString("0.##")</span>
                <div>
                     <label for="overallComments" class="form-label visually-hidden">Overall Comments</label>
                     <input id="overallComments" type="text" class="form-control" placeholder="Add overall comments..." @bind="_timesheet.Comments" @bind:after="TriggerAutoSave" disabled="@IsTimesheetReadOnly"/>
                </div>
            </div>
            <div class="submit-container">
                <button class="btn btn-success btn-submit" @onclick="HandleSubmitRequest" disabled="@IsSubmitButtonDisabled()">@GetSubmitButtonText()</button>
            </div>
        </div>
    }
    else
    {
        <div class="empty-state-container">
            <h4>No timesheet started for this week.</h4>
            <button class="btn btn-primary" @onclick="AddNewLine">
                <i class="fas fa-plus" style="margin-right: 8px;"></i> Start by Adding a Line
            </button>
        </div>
    }
</div>

@if (_showConfirmationModal)
{
    <div class="modal-overlay" @onclick="CancelSubmission">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3 class="modal-title">
                    @if (_isStandardSubmission)
                    {
                        <span class="icon-success">✅</span> <span>Confirm Submission</span>
                    }
                    else
                    {
                        <span class="icon-warning">⚠️</span> <span>Review Submission</span>
                    }
                </h3>
                <button class="btn-close" @onclick="CancelSubmission">×</button>
            </div>
            <div class="modal-body">
                @if (_confirmationMessages.Any())
                {
                    <ul>
                        @foreach (var message in _confirmationMessages)
                        {
                            <li>@((MarkupString)message)</li>
                        }
                    </ul>
                }
                <p class="confirmation-question">Are you sure you want to submit?</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CancelSubmission">Cancel</button>
                <button class="btn btn-success" @onclick="ConfirmSubmission">Yes, Submit</button>
            </div>
        </div>
    </div>
}


@code {
    #region State and Parameters
    private TimesheetDto? _timesheet;
    private bool _isLoading = true;
    private bool _isSaving = false;
    private string? _errorMessage;
    private DateTime _currentWeekStart;

    private readonly DayOfWeek[] _daysOfWeek = { DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday, DayOfWeek.Saturday, DayOfWeek.Sunday };
    private readonly List<string> _allPayCodes = new() { PayCodes.Regular, PayCodes.Sick, PayCodes.Overtime };

    private Timer? _debounceTimer;
    private string _autosaveStatusMessage = "All changes saved.";
    private string _autosaveStatusClass = "status-saved";
    private readonly int _debouncePeriod = 1000;

    // --- State for the confirmation modal ---
    private bool _showConfirmationModal = false;
    private List<string> _confirmationMessages = new();
    private bool _isStandardSubmission = true;
    #endregion

    #region Computed Properties
    private bool IsTimesheetReadOnly => _timesheet?.Status == TimesheetStatus.Approved || _timesheet?.Status == TimesheetStatus.Submitted;
    private bool CanAddNewLine => _allPayCodes.Count > (_timesheet?.Lines.Count ?? 0);
    private bool _isDisplayingCurrentCalendarWeek => _currentWeekStart.Date == GetStartOfWeek(DateTime.Today).Date;
    #endregion

    #region Page Lifecycle
    protected override async Task OnInitializedAsync()
    {
        // No need to fetch the user here; identity is handled by the auth cookie on API calls.
        InitializeDebounceTimer();
        _currentWeekStart = GetStartOfWeek(DateTime.Today);
        await LoadTimesheetForWeekAsync();
    }

    public void Dispose() => _debounceTimer?.Dispose();
    #endregion

    #region Data Loading and Saving
    private async Task LoadTimesheetForWeekAsync()
    {
        _isLoading = true;
        _errorMessage = null;
        StateHasChanged(); 

        try
        {
            _timesheet = await TimesheetService.GetTimesheetAsync(_currentWeekStart);
            _autosaveStatusMessage = "All changes saved.";
            _autosaveStatusClass = "status-saved";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to load timesheet: {ex.Message}";
            _timesheet = null;
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void InitializeDebounceTimer()
    {
        _debounceTimer = new Timer(async (_) => await InvokeAsync(AutoSaveTimesheetAsync), null, Timeout.Infinite, Timeout.Infinite);
    }

    private void TriggerAutoSave()
    {
        if (IsTimesheetReadOnly) return;
        _autosaveStatusMessage = "Saving...";
        _autosaveStatusClass = "status-saving";
        StateHasChanged();
        _debounceTimer?.Change(_debouncePeriod, Timeout.Infinite);
    }
    
    private async Task AutoSaveTimesheetAsync()
    {
        if (IsTimesheetReadOnly) return;
        await PerformSaveAsync();
    }
    
    private async Task PerformSaveAsync(TimesheetStatus? newStatus = null)
    {
        if (_isSaving || _timesheet == null) return;

        _isSaving = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            if (newStatus.HasValue)
            {
                _timesheet.Status = newStatus.Value;
            }

            var dto = new TimesheetCreateUpdateDto
            {
                WeekStartDate = _timesheet.WeekStartDate,
                Comments = _timesheet.Comments,
                Status = _timesheet.Status,
                Lines = _timesheet.Lines.Select(l => new TimesheetLineDto { PayCode = l.PayCode, ProjectName = l.ProjectName, Hours = l.Hours }).ToList()
            };

            var savedTimesheet = await TimesheetService.SaveTimesheetAsync(dto);
            _timesheet = savedTimesheet;

            _autosaveStatusMessage = $"Saved at {DateTime.Now:HH:mm:ss}";
            _autosaveStatusClass = "status-saved";
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Save failed: {ex.Message}";
            _autosaveStatusMessage = "Error saving!";
            _autosaveStatusClass = "status-error";
        }
        finally
        {
            _isSaving = false;
            await InvokeAsync(StateHasChanged);
        }
    }
    #endregion
    
    #region Submission Flow and Validation
    private (bool isStandard, List<string> messages) AnalyzeSubmission()
    {
        var messages = new List<string>();
        bool isStandard = true;

        if (_timesheet == null) return (false, messages);

        var sickHours = _timesheet.Lines.FirstOrDefault(l => l.PayCode == PayCodes.Sick)?.TotalHours ?? 0;
        if (sickHours > 0)
        {
            isStandard = false;
            messages.Add($"Timesheet includes <strong>{sickHours}</strong> sick hour(s).");
        }

        var overtimeHours = _timesheet.Lines.FirstOrDefault(l => l.PayCode == PayCodes.Overtime)?.TotalHours ?? 0;
        if (overtimeHours > 0)
        {
            isStandard = false;
            messages.Add($"Timesheet includes <strong>{overtimeHours}</strong> overtime hour(s).");
        }

        var regularLine = _timesheet.Lines.FirstOrDefault(l => l.PayCode == PayCodes.Regular);
        if (regularLine != null)
        {
            var workdays = new[] { DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday };
            foreach (var day in workdays)
            {
                if (regularLine.Hours.TryGetValue(day, out var hours) && hours != 8 && hours != 0)
                {
                    isStandard = false;
                    messages.Add($"Regular hours for {day} are <strong>{hours}</strong> (not the standard 8).");
                }
            }
        }
        
        if (isStandard && !messages.Any())
        {
            messages.Add("Timesheet appears to be standard.");
        }

        return (isStandard, messages);
    }
    
    private bool IsSubmissionValid(out string? error)
    {
        if (_timesheet == null || !_timesheet.Lines.Any())
        {
            error = "Cannot submit an empty timesheet.";
            return false;
        }
        if (_timesheet.TotalHours <= 0)
        {
            error = "Cannot submit a timesheet with zero total hours.";
            return false;
        }
        error = null;
        return true;
    }

    private async Task HandleSubmitRequest()
    {
        await PerformSaveAsync();
        
        if (!IsSubmissionValid(out var validationError))
        {
            _errorMessage = validationError;
            return;
        }
        _errorMessage = null;

        var analysis = AnalyzeSubmission();
        _isStandardSubmission = analysis.isStandard;
        _confirmationMessages = analysis.messages;
        
        _showConfirmationModal = true;
    }

    private void CancelSubmission() => _showConfirmationModal = false;

    private async Task ConfirmSubmission()
    {
        _showConfirmationModal = false;
        await PerformSaveAsync(TimesheetStatus.Submitted);
    }
    #endregion

    #region UI Event Handlers
    private async Task ChangeWeekAsync(int weeksToAdd)
    {
        _currentWeekStart = _currentWeekStart.AddDays(7 * weeksToAdd);
        await LoadTimesheetForWeekAsync();
    }

    private async Task GoToCurrentWeekAsync()
    {
        _currentWeekStart = GetStartOfWeek(DateTime.Today);
        await LoadTimesheetForWeekAsync();
    }
    
    private void AddNewLine()
    {
        if (!CanAddNewLine) return;

        if (_timesheet == null)
        {
            _timesheet = new TimesheetDto
            {
                WeekStartDate = _currentWeekStart,
                Status = TimesheetStatus.Draft
            };
        }

        string? firstAvailablePayCode = _allPayCodes.FirstOrDefault(pc => !_timesheet.Lines.Any(l => l.PayCode == pc));
        if (firstAvailablePayCode != null)
        {
            _timesheet.Lines.Add(new TimesheetLineDto
            {
                PayCode = firstAvailablePayCode,
                Hours = _daysOfWeek.ToDictionary(day => day, day => 0.0)
            });
            TriggerAutoSave();
        }
    }

    private void DeleteLine(TimesheetLineDto line)
    {
        _timesheet?.Lines.Remove(line);
        TriggerAutoSave();
    }

    private void HandleHoursChange(TimesheetLineDto line, DayOfWeek day, string? value)
    {
        if (double.TryParse(value, out double hours) && hours >= 0 && hours <= 24)
        {
            line.Hours[day] = hours;
            line.TotalHours = line.Hours.Values.Sum();
            TriggerAutoSave();
        }
    }
    
    private async Task CopyFromPreviousWeekAsync()
    {
        try
        {
            var previousWeekStart = _currentWeekStart.AddDays(-7);
            var previousTimesheet = await TimesheetService.GetTimesheetAsync(previousWeekStart);

            if (previousTimesheet != null && previousTimesheet.Lines.Any())
            {
                _timesheet = new TimesheetDto
                {
                    WeekStartDate = _currentWeekStart,
                    Status = TimesheetStatus.Draft,
                    Comments = previousTimesheet.Comments,
                    Lines = previousTimesheet.Lines.Select(l => new TimesheetLineDto
                    {
                        PayCode = l.PayCode,
                        ProjectName = l.ProjectName,
                        Hours = new Dictionary<DayOfWeek, double>(l.Hours),
                        TotalHours = l.TotalHours
                    }).ToList()
                };
                await PerformSaveAsync();
            }
            else
            {
                _errorMessage = "No data found in the previous week to copy.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Could not copy previous week: {ex.Message}";
        }
    }
    #endregion

    #region UI State and Display Logic
    private string DisplayWeekRange() => $"Week of {_currentWeekStart:MMMM d, yyyy}";
    
    private DateTime GetDateForDay(DayOfWeek day) => _currentWeekStart.AddDays(((int)day - (int)DayOfWeek.Monday + 7) % 7);

    private string GetDayCellClasses(DayOfWeek day)
    {
        var date = GetDateForDay(day);
        if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday) return "weekend-day";
        if (date.Date == DateTime.Today) return "current-day";
        return "";
    }

    private string GetStatusBadgeClass() => "status-badge status-" + (_timesheet?.Status.ToString().ToLower() ?? "draft");

    private string GetSubmitButtonText()
    {
        return _timesheet?.Status switch
        {
            TimesheetStatus.Submitted => "Resubmit",
            TimesheetStatus.Approved => "Approved",
            TimesheetStatus.Rejected => "Resubmit",
            _ => "Submit for Approval"
        };
    }

    private bool IsSubmitButtonDisabled()
    {
        if (_isSaving || _isLoading || _timesheet == null || !_timesheet.Lines.Any()) return true;
        return _timesheet.Status == TimesheetStatus.Approved || _timesheet.Status == TimesheetStatus.Submitted;
    }

    private DateTime GetStartOfWeek(DateTime dt) => dt.AddDays(-1 * ((dt.DayOfWeek - DayOfWeek.Monday + 7) % 7)).Date;
    #endregion
}